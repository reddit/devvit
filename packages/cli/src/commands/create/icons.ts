import fsp from 'node:fs/promises';
import path from 'node:path';

import { Args, ux } from '@oclif/core';
import tinyglob from 'tiny-glob';

import { DevvitCommand } from '../../util/commands/DevvitCommand.js';
import { dirExists } from '../../util/files.js';

type SvgAsset = { name: string; contents: string };

// TODO: When Blocks support is fully removed, this command can be removed as well, since icons will
//  be loaded directly in the webview once we're fully in a Devvit Web world.
export default class Icons extends DevvitCommand {
  static override description = `Create a new icon set for your project`;

  static override args = {
    outputFile: Args.string({
      description: 'Path to the output file',
      default: 'src/icons.ts',
    }),
  } as const;

  async run(): Promise<void> {
    const {
      args: { outputFile },
    } = await this.parse(Icons);

    const svgAssets = await this.#getSvgAssets();
    if (svgAssets.length === 0) {
      this.log('No SVG assets found - add some to your assets directory!');
      return;
    }

    ux.action.start('Creating icons map');
    const iconsMap = this.#createIconsMap(svgAssets);
    await fsp.writeFile(outputFile, iconsMap);
    ux.action.stop(`Created icons map at ${outputFile}!`);
  }

  async #getSvgAssets(): Promise<SvgAsset[]> {
    const assetsPath = this.project.mediaDir;
    if (!assetsPath || !(await dirExists(assetsPath))) {
      // Return early if there isn't an assets directory
      return [];
    }

    const assetsGlob = path
      .join(assetsPath, '**', '*.svg')
      // Note: tiny-glob *always* uses `/` as its path separator, even on Windows, so we need to
      // replace whatever the system path separator is with `/`
      .replaceAll(path.sep, '/');
    const assets = await tinyglob(assetsGlob, {
      filesOnly: true,
      absolute: true,
    });
    return await Promise.all(
      assets.map(async (asset) => {
        const name = path.relative(assetsPath, asset);
        const contents = await fsp.readFile(asset, 'utf-8');
        return { name, contents };
      })
    );
  }

  #createIconsMap(svgAssets: SvgAsset[]): string {
    const HEADER = `// This file is auto-generated by \`devvit create icons\`. Do not edit it directly.
import {svg} from "@devvit/public-api";

export const Icons = {`;
    const FOOTER = `} as const;`;

    const iconLines = svgAssets.map(
      (asset) => `  "${asset.name}": svg\`${asset.contents.replaceAll(/\n/g, '')}\`,`
    );

    return [HEADER, ...iconLines, FOOTER].join('\n');
  }
}
